<?xml version="1.0" encoding="utf-8"?>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" epub:prefix="z3998: http://www.daisy.org/z3998/2012/vocab/structure/, se: https://standardebooks.org/vocab/1.0" xml:lang="en-US">
	<head>
		<title>Lesson 1: My First Character</title>
		<link href="../css/core.css" rel="stylesheet" type="text/css"/>
		<link href="../css/local.css" rel="stylesheet" type="text/css"/>
	</head>
	<body>
		<section id="chapter-1">
			<h2 epub:type="title">Lesson 1: My First Character</h2>
			<p>Yes, we have already made our first character when we created <span class="betafont">B</span>. For that character you just copied. This time I am going to explain what goes into making a character.</p>
			<section id="chapter-1-1">
				<h3 epub:type="title">The Command Line</h3>
				<p>Through most of this lesson we make use of the METAFONT command line and assume you are that will display graphical results on your screen. You are free to use text file and look at the <code>log</code> file, and create a proof sheet like you did for <span class="betafont">B</span>. If you are in a state where you are typing things in directly but don’t have the ability to results on screen, it can be helpful to know that if no name is provided the results are stored in a set of files with the base name <code>mfput</code>. So we have <code>mfput.log</code>,⁠ ⁠…</p>
				<p>Open a command line, go to a useful directory, and start METAFONT by typing <code>mf</code>. You will receive a message like:</p>
				<blockquote>
					<pre>
This is METAFONT, Version 2.718281 (TeX Live 2013)
**
					</pre>
				</blockquote>
				<p class="continued">The “<code>**</code>” prompt indicates that \MF\ is expecting a filename. We don’t have a filename and just want to have a talk so we tell it to <code>\relax</code> and receive a new prompt of <code>*</code> which means that METAFONT is ready to listen. Then we can follow up with anything else that we want. Go ahead and try it:</p>
				<blockquote>
					<pre>
**\relax

*1+1;
					</pre>
				</blockquote>
				<p class="continued">METAFONT responds with:</p>
				<blockquote>
					<pre>
&gt;&gt; 2
! Isolated expression.
&lt;to be read again&gt;
                   ;
&lt;*&gt; 1+1;

?
					</pre>
				</blockquote>
				<p class="continued">At the point the <code>?</code> prompt is METAFONT asking what you want to do about it. We are going to type <code>s</code> which means to enter scrollmode⁠—when METAFONT sees an error it reports it and just keeps on scrolling.</p>
				<blockquote>
					<pre>
? s
OK, entering scrollmode...

*
					</pre>
				</blockquote>
				<p>Did you notice though, METAFONT correctly calculated the answer? <code>&gt;&gt; 2</code>. You can use this trick to have a handy (if talkative) desk calculator⁠—Knuth claims to sometimes do this himself.</p>
				<p>Now try entering the following:</p>
				<blockquote>
					<pre>
*1+1; 2-1; 2*3; 3/2; 3div2; 3mod2; 2**3;
					</pre>
				</blockquote>
				<p class="continued">The beginning of the output looks like this:</p>
				<blockquote>
					<pre>
&gt;&gt; 2
! Isolated expression.
&lt;to be read again&gt;
                   ;
&lt;*&gt; 1+1;
         2-1; 2*3; 3/2; 3div2; 3mod2; 2**3;
&gt;&gt; 1
					</pre>
				</blockquote>
				<p class="continued">First we get the answer to <code>1+1</code>, later we receive a line where the second line begins with <code>2-1;</code> and the answer to <code>2-1</code> is just below it. These are our most common operators.</p>
				<ul>
					<li><p><code>+</code> means to add two values;</p></li>
					<li><p><code>-</code> means to subtract two values;</p></li>
					<li><p><code>*</code> means to multiply two values;</p></li>
					<li><p><code>/</code> means to divide two values;</p></li>
					<li><p><code>div</code> means to divide two values and throw away any fractional part;</p></li>
					<li><p><code>mod</code> means to divide two values and report on the remainder; and</p></li>
					<li><p><code>**</code> means to exponate two numbers (so 2**3 is 2<sup>3</sup>).</p></li>
				</ul>
				<p class="continued">You can get roots by using <code>**</code> and a fraction. So <code>2**(1/4);</code> will give you the fourth root of 2.</p>
				<p>There are limits, only about four digits to the right of the decimal point are accurate, and METAFONT has a maximum value of about thirty-two thousand. Try this out and see what METAFONT answers you.</p>
				<blockquote>
					<pre>
2**10; 2**11; 2**16; 2**17;
					</pre>
				</blockquote>
				<p>The correct answers are 1 024, 2 048, 32 768, and 65 536. The first three look correct, if we round the fifth digit properly; but in actuality only the first two are correct. The value 32 787.999 98 means “∞” and 2<sup>16</sup> is not ∞.</p>
				<p>Finally, did you notice I said two <em>values</em> and not two <em>numbers</em>. METAFONT can work with more that just simple numbers, and many of these operators are valid for points, vectors, and angles.</p>
			</section>
			<section id="chapter-1-2">
				<h3 epub:type="title">Some Simple Algebra</h3>
				<p>METAFONT can also do quite a bit of algebra⁠—by which we mean keep track of relationships and manipulate them to solve for unknown values. For most programming languages when you see <code>c=a</code> it means that <code>c</code> is going to be assigned the value that <code>a</code> has <em>at that moment in time</em>. This is why some languages, like Pascal and Ada use <code>:=</code> instead. When you type <code>c:=a</code> it is supposed to visually remind you of c←a. When you type <code>c=a</code> in Ada or Pascal it means you are comparing two values for equality.</p>
				<p>METAFONT also maintains this distinction, but it can much more than just compare values. First, let’s make a pair of assignments.</p>
				<blockquote>
					<pre>
tracingequations:=tracingonline:=1;
					</pre>
				</blockquote>
				<p>These variables start out with values of 0 and by changing them to 1 we are asking METAFONT to tell us about its thought processes as it works. Now let’s continue.</p>
				<blockquote>
					<pre>
a+b-c=0;
					</pre>
				</blockquote>
				<p class="continued">And METAFONT tells us:</p>
				<blockquote>
					<pre>
## c=b+a

*
					</pre>
				</blockquote>
				<p class="continued">So we told METAFONT that <code>a+b-c</code> has a relationship of equality to zero. Whatever those three values are, that result must add up to zero. Then METAFONT told us that it doesn’t know what <code>a</code> or <code>b</code> are but it did determine that <code>c=b+a</code>. It could just as well determined that <code>b=c-a</code> or anything else. This is just how METAFONT wants to remember this relationship. Now let’s give it a little more information.</p>
				<blockquote>
					<pre>
c=2a;
## b=a

*					</pre>
				</blockquote>
				<p class="continued">METAFONT now knows that if <code>c=b+a</code> <em>and</em> <code>c=2a</code> then <code>b</code> must have the same value as <code>a</code>, which is why it tells us <code>## b=a</code>. If you are used to programming traditional imperative languages, it may strike you as a bit off. But we didn’t say <code>:=</code> to make an assignment, we provided an additional relationship. Also notice that you did not have to say <code>c=2*a;</code>, because METAFONT can distinguish between numbers and variables and known that 2x means 2⋅x or 2×x.</p>
				<p>Let’s give METAFONT just a little more information. Tell METAFONT that <code>a=5;</code> and see what it says.</p>
				<blockquote>
					<pre>
a=5;
## a=5
#### b=5
#### c=10

*
					</pre>
				</blockquote>
				<p>First it reports that it took in your relationship and internally stored it <code>## a=5</code>. Remember that it already figured out that <code>b=a</code> so the next thing it reports to us is that <code>#### b=5</code>. Finally, it also knows that <code>c=b+a</code> <em>and</em> <code>c=2a</code> so <code>#### c=10</code>.</p>
				<p>Let’s give METAFONT just a little bit more information. Tell METAFONT that <code>c=0;</code> and it reports:</p>
				<blockquote>
					<pre>
! Inconsistent equation (off by -10).
&lt;to be read again&gt;
                   ;
&lt;*&gt; c=0;
					</pre>
				</blockquote>
				<p>It already knows that <code>c=10</code> so it can’t also be true that <code>c=0</code> and it rightfully complained. You can tell it <code>c:=0;</code> and it will happily forget everything it already knows about <code>c</code> and report that it has a value of 0. So be careful about whether you are assigning or establishing an algebraic relationship.</p>
				<section id="chapter-1-2-1">
					<h4 epub:type="title">Exercise 2</h4>
					<blockquote>
						<p>Here is a system of equations, presented in a mathematical way:</p>
						<table>
							<tbody>
								<tr><td>a</td><td>+</td><td>b</td><td>+</td><td>2c</td><td>=</td><td>3;</td></tr>
								<tr><td>a</td><td>-</td><td>b</td><td>-</td><td>2c</td><td>=</td><td>1;</td></tr>
								<tr><td></td><td></td><td>b</td><td>+</td><td> c</td><td>=</td><td>4.</td></tr>
							</tbody>
						</table>
						<ol>
							<li><p>Use METAFONT to find out if this system of equations is consistent.</p></li>
							<li><p>Is there enough information to solve them?</p></li>
							<li><p>If so, what are the values?</p></li>
						</ol>
					</blockquote>
				</section>
			</section>
			<section id="chapter-1-3">
				<h3 epub:type="title">Coordinates, Lines, and Curves</h3>
				<p>Having a desk calculator is convenient. Having a limited computer algebra system is nice. But how do we draw?</p>
				<p>Our first non-number value is the coordinate. Do you remember me saying that the operators worked for more than numbers? A coordinate is a pair of values representing horizontal and then vertical direction. So if we say <code>(3,2)</code> we mean start at some predefined location, move three units horizontally (to the right) and two units vertically (up). The predefined location is called the <strong>origin</strong> because it is where all direction is measured from.</p>
				<p>If the first number is:</p>
				<blockquote>
					<table>
						<tbody>
							<tr><td> &gt;0</td><td>the horizontal movement is right;</td></tr>
							<tr><td> =0</td><td>there is no horizontal movement; and</td></tr>
							<tr><td> &lt;0</td><td>the horizontal movement is left.</td></tr>
						</tbody>
					</table>
				</blockquote>
				<p>In a similar way if the second number is:</p>
				<blockquote>
					<table>
						<tbody>
							<tr><td> &gt;0</td><td>the vertical movement is up;</td></tr>
							<tr><td> =0</td><td>there is no vertical movement; and</td></tr>
							<tr><td> &lt;0</td><td>the vertical movement is down.</td></tr>
						</tbody>
					</table>
				</blockquote>
				<p>So where are these coordinates measuring distance? METAFONT has some graph paper that it keeps track of internally. This is a grid of square <strong>pixels</strong>, or <em>picture elements</em>. So let’s try a bit of these.</p>
				<blockquote>
					<pre>
showit;
drawdot(35,70); showit;
drawdot(65,70); showit;
draw(20,100)--(50,125)--(80,100); showit;
draw(20,40)..(50,25)..(80,40); showit;
shipit;
end
					</pre>
				</blockquote>
				<p>I left out the <code>*</code> prompt and didn't tell you what METAFONT says. You should be familiar enough by now. I also chose that breakdown of commands so that you could watch the drawing happen. The first <code>showit;</code> is just to bring up a visual display if your system’s METAFONT happens to support one. Some systems will not require this, others seem to need this to show the first <code>drawdot</code> command. Just like with <code>\relax</code>, I will not include it in other instructions, so if you forget you may need to do <code>showit;</code> twice after your first draw instruction. After each <code>drawdot</code> command you saw a dot appear. The second dot was to the right of the first dot because the first number (the horizontal position) was more positive. The <code>draw</code> command with <code>--</code> drew a line. The <code>draw</code> command with <code>..</code> drew a curved line. When you entered <code>shipit;</code>, METAFONT responded with <code>[0]</code> which means that it assigned the current state of the graph paper to character 0. Finally, <code>end</code> told METAFONT you were done and it reported that it created a font called <code>mfput.2062gf</code>. If you use <code>gftodvi</code> and take a look, you will find that there is one page and the character is</p>
				<blockquote>
					<p><img alt="Smiley." src="../images/smiley.png"/></p>
				</blockquote>
				<p class="continued">So we have two points, a bent line, and a nice curve. But what are lines and curves really? A line is a set of two or more points that METAFONT has been told to connect as if using a straight edge. A curve is a set of two or more points that METAFONT has been told to freehand draw through. “Freehand draw” sounds a bit fuzzy, and METAFONT is actually very exacting about the type of curve it draws; but the intent is for METAFONT to draw as if it was doing a freehand curve.</p>
				<p>So lines and curves are sets of two or more connected coordinates. Let’s try this out.</p>
				<blockquote>
					<pre>
draw(0,0)--(0,100); showit;
draw(100,0)..(100,100); showit;
					</pre>
				</blockquote>
				<p>METAFONT is very exacting about what a curve should look like, and if a curve only has two coordinates then it is actually a line.</p>
			</section>
			<section id="chapter-1-4">
				<h3 epub:type="title">Coordinates as Variables</h3>
				<p>So far I keep promising that METAFONT can work with more than numbers, but I keep not doing it. So let’s start with how do we assign coordinates to a variable.</p>
				<p>By long established tradition that predates METAFONT, the first number of a coordinate is called <em>x</em>. By the same tradition, the second number of a coordinate is called <em>y</em>. In keeping with that tradition <code>x</code><em>&lt;number&gt;</em> represents the first number of a coordinate, and <code>y</code><em>&lt;number&gt;</em> represents the second number of a coordinate. So if we wanted to define a rectangle we could say <code>x1=0; y1=0; x2=50; y2=0;</code>⁠ ⁠… which probably feels like a cheat after all of my promises of being meta. Since METAFONT treats <em>x</em> as the horizontal movement and <em>y</em> as vertical movement, it was decided that <em>z</em> would be a coordinate. And now we can finally use a coordinate as a variable.</p>
				<blockquote>
					<pre>
z1=(0,0); z2=(100,0); z3=(100,50); z4=(0,50);
draw z1--z2--z3--z4--z1;
showit;
					</pre>
				</blockquote>
				<p class="continued"> and you will have a nice rectangle.</p>
			</section>
			<section id="chapter-1-5">
				<h3 epub:type="title">Coordinate Algebra</h3>
				<p>This is how we begin to introduce some meta-ness to METAFONT. It’s perfectly fine to say “I want a rectangle and I want it to have these corners” but you can also tell METAFONT things like “I want a rectangle that is twice as wide as it is high.”</p>
				<blockquote>
					<pre>
x1=x2; x3=x4;
y2=y3; y4=y1;
y2-y1=2*(x3-x1);
z1=(0,0);
x3=100;
draw z1--z2--z3--z4--z1;
showit;
					</pre>
				</blockquote>
				<p>I do want to point out that there is no requirement to draw the points in order. METAFONT will not complain if you say <code>draw z2--z4--z1--z3--z1;</code>. The reason for them to go in order is for <em>our</em> convenience.</p>
				<p>Now if we understand the writing system we are trying to create well enough, we can add relationships between coordinates and ensure things like a capital H has stems with equal widths. We can even assign a value to a <strong>parameter</strong> like <code>stem_width</code> and use that is making all of our letters to ensure that all stems have equal width.</p>
				<p>If you know anything about font design, you will have realized that I just lied. There are going to be cases where some stems will need to be slightly narrower or slightly wider than the <em>design</em>’s stem width. It still holds true that we can make all the stem widths <em>appear</em> equal because just like I stated <code>y2-y1=2*(x3-x1);</code> I could have just as easily said <code>y2-y1=0.95*stem_width;</code> and had uneven stem widths that look even. If you aren’t familiar with font design this may seem strange, but well designed fonts are created to account for the various optical illusions we all see and make the letter look correct anyway.</p>
			</section>
			<section id="chapter-1-6">
				<h3 epub:type="title">Line Algebra</h3>
				<p>This all works well for parallel figures like squares and rectangles, what about more complicated shapes like the ones we find in letters? We can use the <em>z</em> coordinate to find things part way across a line. Consider the capital letter A. We know we want the horizontal line to connect from one line to the other. How do we find the exact coordinate to do that? We don’t, but METAFONT will.</p>
				<p>Lets imagine that we have defined <code>z1</code>, <code>z2</code>, and <code>z3</code> to be the bottom-left, the top, and the bottom right of a capital A. We want to define <code>z4</code> and <code>z5</code> to control the horizontal bar and we want to have it be exactly about 70% of the way up.</p>
				<blockquote>
					<pre>
z4 = z1+0.7(z2-z1);
z5 = z2+0.7(z3-z2);
					</pre>
				</blockquote>
				<p class="continued">Treating points across a line like this has a well established practice in mathematics and is called <em>parameterization</em> of a line. METAFONT uses this and you can instead say:</p>
				<blockquote>
					<pre>
z4=0.7[z1,z2];
z5=0.7[z2,z3];
					</pre>
				</blockquote>
				<p>In this case <code>0.7[z1,z2]</code> means “as you move from <code>z1</code> to <code>z2</code>, find the point 0.7 times the length.” And you are not required to only use numbers less than one. You can also use this to define points twice as far or even the opposite direction.</p>
			</section>
			<section id="chapter-1-7">
				<h3 epub:type="title">Let’s Draw Some Characters</h3>
				<p>This section is all assignments. You should have seen enough to look over the last several sections and figure out how to define these shapes.</p>
				<p>For each of these exercises, create a separate <code>mf</code> file so that you can get a clean painting service each time. Just name them <code>e3.mf</code>, <code>e4.mf</code>, and so on. Just like the first exercises, I don’t have an answer here. The answer is the process of doing this.</p>
				<p><strong>Exercise 3:</strong> Pick some coordinates and have METAFONT draw a capital letter E.</p>
				<p><strong>Exercise 4:</strong> This time, establish the correct relationships between <em>x</em>s and <em>y</em>s. For instance, the two <em>y</em> coordinates of the top line for the letter E are equal.</p>
				<p><strong>Exercise 5:</strong> Now make the middle horizontal line of the E be 90% of the length of the top and bottom lines. The <em>x</em> coordinates of your top and bottom lines are related because of the last exercise, right?</p>
				<p><strong>Exrecise 6:</strong> Now make the middle horizontal line of the E to be exactly in the middle. Unless you already did that.</p>
			</section>
			<p>That’s it for this lesson. In the next lesson we’ll learn how to make our lines a little more interesting.</p>
		</section>
	</body>
</html>
